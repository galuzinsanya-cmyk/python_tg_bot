import logging
import os
import json
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID"))
PRICE = os.getenv("PRICE")
STOCK = os.getenv("STOCK")
WALLET = os.getenv("WALLET")
INSTRUCTIONS = os.getenv("INSTRUCTIONS", "–§–∞–π–ª –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±—É–¥—É—Ç –≤—ã—Å–ª–∞–Ω—ã –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.")

# –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç
CHAT_LINK = "https://t.me/+k_TPDmjN1xdhNDky"

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(
    KeyboardButton("–¶–µ–Ω–∞ üí∞"),
    KeyboardButton("–ù–∞–ª–∏—á–∏–µ üì¶")
)
keyboard.add(
    KeyboardButton("–ö—É–ø–∏—Ç—å üõí"),
    KeyboardButton("–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úÖ")
)
keyboard.add(KeyboardButton("TG –ß–ê–¢ –ü–ï–†–ï–õ–ò–í–ê üí¨"))

# --- –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ---
def load_users():
    if os.path.exists("users.json"):
        with open("users.json", "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_users(users):
    with open("users.json", "w", encoding="utf-8") as f:
        json.dump(users, f)

users = load_users()
user_context = {}  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –∫—É–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª (—Ç–æ–≤–∞—Ä –∏–ª–∏ —á–∞—Ç)


# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    if message.from_user.id not in users:
        users.append(message.from_user.id)
        save_users(users)

    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –¥–æ—Å—Ç—É–ø–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç.\n–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –Ω–∏–∂–µ üëá",
        reply_markup=keyboard
    )


# --- –¶–µ–Ω–∞ ---
@dp.message_handler(lambda message: message.text == "–¶–µ–Ω–∞ üí∞")
async def price(message: types.Message):
    await message.answer(f"üí∞ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {PRICE} –¥–æ–ª–ª–∞—Ä–æ–≤.")


# --- –ù–∞–ª–∏—á–∏–µ ---
@dp.message_handler(lambda message: message.text == "–ù–∞–ª–∏—á–∏–µ üì¶")
async def stock(message: types.Message):
    await message.answer(f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {STOCK} —à—Ç.")


# --- –ö—É–ø–∏—Ç—å ---
@dp.message_handler(lambda message: message.text == "–ö—É–ø–∏—Ç—å üõí")
async def buy(message: types.Message):
    user_context[message.from_user.id] = "product"
    await message.answer(
        f"üíµ –î–ª—è –ø–æ–∫—É–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ—à–µ–ª–µ–∫:\n\n{WALLET}\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úÖ', –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ñ–∞–π–ª."
    )


# --- TG –ß–ê–¢ –ü–ï–†–ï–õ–ò–í–ê ---
@dp.message_handler(lambda message: message.text == "TG –ß–ê–¢ –ü–ï–†–ï–õ–ò–í–ê üí¨")
async def tg_chat(message: types.Message):
    user_context[message.from_user.id] = "chat"
    chat_price = 19
    await message.answer(
        f"üí¨ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π TG –ß–ê–¢ –ü–ï–†–ï–õ–ò–í–ê —Å—Ç–æ–∏—Ç {chat_price}$ –≤ –º–µ—Å—è—Ü.\n\n"
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {chat_price}$ –Ω–∞ —ç—Ç–æ—Ç –∫–æ—à–µ–ª—ë–∫:\n\n{WALLET}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úÖ' ‚Äî –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É."
    )


# --- –Ø –æ–ø–ª–∞—Ç–∏–ª ‚úÖ ---
@dp.message_handler(lambda message: message.text == "–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úÖ")
async def paid(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"
    choice = user_context.get(user_id, "product")

    if choice == "chat":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü—É –∑–∞—è–≤–∫—É —Å –∫–Ω–æ–ø–∫–æ–π "–û–¥–æ–±—Ä–∏—Ç—å"
        approve_button = InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data=f"approve_{user_id}")
        )

        await bot.send_message(
            OWNER_ID,
            f"üí¨ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ TG –ß–ê–¢ –ü–ï–†–ï–õ–ò–í–ê:\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\nID: {user_id}\n\n–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã ‚Äî –Ω–∞–∂–º–∏ '–û–¥–æ–±—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø'.",
            reply_markup=approve_button
        )

        await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è üîí")

    else:
        # –û–±—ã—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞
        await bot.send_message(
            OWNER_ID,
            f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} ({user_id}) –æ—Ç–º–µ—Ç–∏–ª –æ–ø–ª–∞—Ç—É *—Ç–æ–≤–∞—Ä–∞*.\n"
            f"–¶–µ–Ω–∞: {PRICE}$.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é."
        )
        await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! {INSTRUCTIONS}")


# --- –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º ---
@dp.callback_query_handler(lambda call: call.data.startswith("approve_"))
async def approve_user(call: types.CallbackQuery):
    if call.from_user.id != OWNER_ID:
        return await call.answer("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –æ–¥–æ–±—Ä—è—Ç—å –∑–∞—è–≤–∫–∏.", show_alert=True)

    user_id = int(call.data.split("_")[1])

    try:
        await bot.send_message(
            user_id,
            f"üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n\n–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç:\n{CHAT_LINK}\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üí¨"
        )
        await call.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–¥–æ–±—Ä–µ–Ω –∏ –ø–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç.")
    except Exception as e:
        await call.message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ({user_id}): {e}")


# --- –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ---
@dp.message_handler(commands=['send'])
async def send_message_to_all(message: types.Message):
    if message.from_user.id != OWNER_ID:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    text = message.text.replace("/send", "").strip()
    if not text:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/send üî• –ù–æ–≤–∞—è –∞–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è!")

    count = 0
    for user_id in users:
        try:
            await bot.send_message(user_id, text)
            count += 1
        except Exception:
            pass

    await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)





